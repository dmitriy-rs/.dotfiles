# Optimized .zshrc with better performance

# Skip loading oh-my-zsh lib files we don't need
ZSH_DISABLE_COMPFIX=true
DISABLE_MAGIC_FUNCTIONS=true
DISABLE_LS_COLORS=true
DISABLE_AUTO_UPDATE=true

export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="af-magic"

setopt auto_cd

export VISUAL=nvim
export EDITOR='nvim'

## command history configuration
HISTFILE=$HOME/.zsh_history
HISTSIZE=1000000
SAVEHIST=1000000
setopt hist_ignore_dups
setopt hist_ignore_space
setopt share_history

# Empty plugins - we'll load them manually
plugins=()

# FZF - lazy load configuration
_fzf_init() {
  export FZF_BASE=/user/bin/fzf
  export FZF_CTRL_T_COMMAND='fd --type f --hidden --exclude .git --exclude .cache'
  export FZF_ALT_C_COMMAND='fd --type d --hidden --exclude .git'
  [[ -f $ZSH/plugins/fzf/fzf.plugin.zsh ]] && source $ZSH/plugins/fzf/fzf.plugin.zsh
}

# User configuration
[[ -f $ZDOTDIR/.aliases ]] && source $ZDOTDIR/.aliases

unsetopt beep

export LC_ALL="en_US.UTF-8"
export LANG="en_US.UTF-8"

# bun and pnpm paths are now set in .zshenv

# Load minimal oh-my-zsh (just theme and core)
source $ZSH/oh-my-zsh.sh

# Setup completion system efficiently
fpath+=~/.zfunc
fpath+=${ZSH_CUSTOM:-${ZSH:-~/.oh-my-zsh}/custom}/plugins/zsh-completions/src

# Optimized compinit - check if dump exists and is newer than zsh installation
autoload -Uz compinit
zcompdump="${ZDOTDIR:-$HOME}/.zcompdump"
if [[ $zcompdump -nt /usr/share/zsh ]] && [[ ! $zcompdump.zwc -ot $zcompdump ]]; then
  # Skip security check for faster startup
  compinit -C -d "$zcompdump"
else
  # Full init and compile the dump file
  compinit -d "$zcompdump"
  # Compile the dump file in background for faster future startups
  { [[ -f "$zcompdump" && ! -f "$zcompdump.zwc" ]] && zcompile "$zcompdump" } &!
fi

# Load essential plugins manually
source $ZSH/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
source $ZSH/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source $ZSH/custom/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh

# Lazy load FZF on first use
fzf() {
  unfunction fzf
  _fzf_init
  fzf "$@"
}

# Lazy load heavy commands
if [[ -f ~/.cargo/env ]]; then
  cargo() {
    unfunction cargo
    source $HOME/.cargo/env
    cargo "$@"
  }
fi

fnm() {
  unfunction fnm
  eval "$(command fnm env --use-on-cd)"
  fnm "$@"
}

# direnv
eval "$(direnv hook zsh)"

z() {
  unfunction z
  eval "$(zoxide init zsh)"
  z "$@"
}

# Lazy load bun completions
if [[ -s "/Users/dmitriy/.bun/_bun" ]]; then
  bun() {
    unfunction bun
    source "/Users/dmitriy/.bun/_bun"
    bun "$@"
  }
fi

### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})â€¦%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit
### End of Zinit's installer chunk
